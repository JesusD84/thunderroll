generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Enum para roles de usuario
enum UserRole {
    ADMIN      // Acceso completo al sistema
    MANAGER    // Gesti칩n de inventario y reportes
    OPERATOR   // Operaciones b치sicas (transferencias, identificaci칩n)
    VIEWER     // Solo lectura
}

// Enum para estados de usuario
enum UserStatus {
    ACTIVE
    INACTIVE
    SUSPENDED
}

// Modelo principal de usuario
model User {
    id                String      @id @default(cuid())
    email             String      @unique
    hashedPassword    String?
    name              String?
    role              UserRole    @default(VIEWER)
    status            UserStatus  @default(ACTIVE)
    department        String?
    phone             String?
    lastLoginAt       DateTime?
    createdAt         DateTime    @default(now())
    updatedAt         DateTime    @updatedAt @default(now())
    createdBy         String?

    // Relaciones con NextAuth
    accounts          Account[]
    sessions          Session[]

    // Usuario que cre칩 este usuario
    creator           User?       @relation("UserCreator", fields: [createdBy], references: [id])
    createdUsers      User[]      @relation("UserCreator")

    @@map("users")
}

// Modelos requeridos por NextAuth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}
